import {
  Count,
  CountSchema,
  Filter,
  repository,
  Where,
} from '@loopback/repository';
import {
  post,
  param,
  get,
  getFilterSchemaFor,
  getWhereSchemaFor,
  patch,
  del,
  requestBody,
} from '@loopback/rest';
import {<%= modelName %>} from '../models';
import {<%= repositoryName %>} from '../repositories';
import {
  AuthenticationBindings,
  UserProfile,
  authenticate,
} from '@loopback/authentication';

export class <%= className %>Controller {
  constructor(
    @repository(<%= repositoryName %>)
    public <%= repositoryNameCamel %> : <%= repositoryName %>,
  ) {}

  <%_ Object.entries(api).forEach(([path, val]) => { -%>
    <%_ if (val['type'] === 'preset') { -%>

      <%_ if (val['name'] === 'create') { -%>
        @authenticate('JwtStrategy', {
            allPathId:'<%= val['allPathId'] %>',
            rawName:'<%= val['rawName'] %>',
            result:'<%= val['result'] %>',
            description:'<%= val['description'] %>',
            type:'<%= val['type'] %>',
            pathTpl:'<%= val['pathTpl'] %>',
            roles: <%- JSON.stringify(val['roles'])%>
          })
        @post('<%= val['path'] %>', {
          summary: '<%= val['summary']%>',
          tags:['<%= name %>'],
          responses: {
            '200': {
              description: '<%= modelName %> model instance',
              content: {'application/json': {schema: {'x-ts-type': <%= modelName %>}}},
            },
          },
          "x-table-name": "<%=tableName%>"
        })
        async create(@requestBody() <%= modelVariableName %>: <%= modelName %>): Promise<<%= modelName %>> {
          return await this.<%= repositoryNameCamel %>.create(<%= modelVariableName %>);
        }
      <%_ } else if (val['name'] === 'findPage') { %>

        @authenticate('JwtStrategy', {
            allPathId:'<%= val['allPathId'] %>',
            rawName:'<%= val['rawName'] %>',
            result:'<%= val['result'] %>',
            description:'<%= val['description'] %>',
            type:'<%= val['type'] %>',
            pathTpl:'<%= val['pathTpl'] %>',
            roles: <%- JSON.stringify(val['roles'])%>
          })
        @get('<%= val['path'] %>', {
          summary: '<%= val['summary']%>',
          tags:['<%= name %>'],
          responses: {
            '200': {
              description: 'Object of page data, result.data is <%= modelName %> model instances, result.total is model count.',
              content: {
                'application/json': {
                  schema: {type: 'object', properties: {
                    data: {type: 'array', items: {'x-ts-type': <%= modelName %>}},
                    total: { type: 'object', properties: { count: { type: 'number' } } }
                  }},
                },
              },
            },
          },
          "x-table-name": "<%=tableName%>"
        })
        async findPage(
          @param.query.object('filter', getFilterSchemaFor(<%= modelName %>)) filter?: Filter,
        ): Promise<{data: <%= modelName %>[], total:Count}> {
          return {
            data: await this.<%= repositoryNameCamel %>.find(filter),
            total: await this.<%= repositoryNameCamel %>.count(filter ? filter['where'] : {})
          };
        }
      <%_ } else if (val['name'] === 'findById') { %>

        @authenticate('JwtStrategy', {
            allPathId:'<%= val['allPathId'] %>',
            rawName:'<%= val['rawName'] %>',
            result:'<%= val['result'] %>',
            description:'<%= val['description'] %>',
            type:'<%= val['type'] %>',
            pathTpl:'<%= val['pathTpl'] %>',
            roles: <%- JSON.stringify(val['roles'])%>
          })
        @get('<%= val['path'] %>/{id}', {
          summary: '<%= val['summary']%>',
          tags:['<%= name %>'],
          responses: {
            '200': {
              description: '<%= modelName %> model instance',
              content: {'application/json': {schema: {'x-ts-type': <%= modelName %>}}},
            },
          },
          "x-table-name": "<%=tableName%>"
        })
        async findById(@param.path.<%= idType %>('id') id: <%= idType %>): Promise<<%= modelName %>> {
          return await this.<%= repositoryNameCamel %>.findById(id);
        }
      <%_ } else if (val['name'] === 'updateById') { %>

        @authenticate('JwtStrategy', {
            allPathId:'<%= val['allPathId'] %>',
            rawName:'<%= val['rawName'] %>',
            result:'<%= val['result'] %>',
            description:'<%= val['description'] %>',
            type:'<%= val['type'] %>',
            pathTpl:'<%= val['pathTpl'] %>',
            roles: <%- JSON.stringify(val['roles'])%>
          })
        @patch('<%= val['path'] %>/{id}', {
          summary: '<%= val['summary']%>',
          tags:['<%= name %>'],
          responses: {
            '204': {
              description: '<%= modelName %> PATCH success',
            },
          },
          "x-table-name": "<%=tableName%>"
        })
        async updateById(
          @param.path.<%= idType %>('id') id: <%= idType %>,
          @requestBody() <%= modelVariableName %>: <%= modelName %>,
        ): Promise<void> {
          await this.<%= repositoryNameCamel %>.updateById(id, <%= modelVariableName %>);
        }
      <%_ } else if (val['name'] === 'deleteById') { %>

        @authenticate('JwtStrategy', {
            allPathId:'<%= val['allPathId'] %>',
            rawName:'<%= val['rawName'] %>',
            result:'<%= val['result'] %>',
            description:'<%= val['description'] %>',
            type:'<%= val['type'] %>',
            pathTpl:'<%= val['pathTpl'] %>',
            roles: <%- JSON.stringify(val['roles'])%>
          })
        @del('<%= val['path'] %>/{id}', {
          summary: '<%= val['summary']%>',
          tags:['<%= name %>'],
          responses: {
            '204': {
              description: '<%= modelName %> DELETE success',
            },
          },
          "x-table-name": "<%=tableName%>"
        })
        async deleteById(@param.path.<%= idType %>('id') id: <%= idType %>): Promise<void> {
          await this.<%= repositoryNameCamel %>.deleteById(id);
        }
      <%_ } else if (val['name'] === 'downloadById') { %>

        @authenticate('JwtStrategy', {
            allPathId:'<%= val['allPathId'] %>',
            rawName:'<%= val['rawName'] %>',
            result:'<%= val['result'] %>',
            description:'<%= val['description'] %>',
            type:'<%= val['type'] %>',
            pathTpl:'<%= val['pathTpl'] %>',
            roles: <%- JSON.stringify(val['roles'])%>
          })
        @get('<%= val['path'] %>/{id}', {
          summary: '<%= val['summary']%>',
          tags:['<%= name %>'],
          responses: {
            '200': {
              description: 'file stream',
              content: {'application/octet-stream ': {}},
            },
          },
          "x-table-name": "<%=tableName%>"
        })
        async downloadById(@param.path.<%= idType %>('id') id: <%= idType %>): Promise<any> {
          let file : any = await this.<%= repositoryNameCamel %>.findById(id);
          let filename = file.filename ? file.filename.split('/') : ['file'];
          filename = filename[filename.length - 1]
          if( file.metadata && file.metadata.file_name){
            filename = file.metadata.file_name
          }
          if( file.metadata && file.metadata.file_extension){
            filename = `${filename}.${file.metadata.file_extension}`
          }
          return {
            filename: encodeURIComponent(filename),
            stream: await this.<%= repositoryNameCamel %>.downloadById(id)
          };
        }

      <%_ } else if (val['name'] === 'download') { %>

        @authenticate('JwtStrategy', {roles: ["5b9a0a383fcba02649524bf1"]})
        @get('<%= val['path'] %>', {
          summary: '<%= val['summary']%>',
          tags:['<%= name %>'],
            responses: {
              '200': {
              description: 'file stream',
              content: {'application/octet-stream ': {}},
            },
          },
          "x-table-name": "<%=tableName%>"
        })
        async download(
          @param.query.object('filter', getFilterSchemaFor(<%= modelName %>)) filter?: Filter,
        ): Promise<any> {
          let files = await this.<%= repositoryNameCamel %>.find(filter);
          let file : any = files && files.length > 0 ? files[0] : null;
          if( file ){
            let filename = file.filename ? file.filename.split('/') : ['file'];
            filename = filename[filename.length - 1]
            if( file.metadata && file.metadata.file_name){
              filename = file.metadata.file_name
            }
            if( file.metadata && file.metadata.file_extension){
              filename = `${filename}.${file.metadata.file_extension}`
            }
            return {
              filename: encodeURIComponent(filename),
              stream: await this.<%= repositoryNameCamel %>.downloadById(file._id || '')
            };
          } else {
            return {
              data: [],
              total: 0
            }
          }
        }

      <%_ }  %>
    <%_ } else {-%>

      @authenticate('JwtStrategy', {
          allPathId:'<%= val['allPathId'] %>',
          rawName:'<%= val['rawName'] %>',
          result:'<%= val['result'] %>',
          description:'<%= val['description'] %>',
          type:'<%= val['type'] %>',
          pathTpl:'<%= val['pathTpl'] %>',
          roles: <%- JSON.stringify(val['roles'])%>
        })
      @get('<%= val['path'] %>', {
        summary: '<%= val['summary']%>',
        tags:['<%= name %>'],
        responses: {
          '200': {
            description: 'Object of page data, result.data is <%= modelName %> model instances, result.total is model count.',
            content: {
              'application/json': {
                schema: {type: 'object', properties: {
                  data: {type: 'array', items: {'x-ts-type': <%= modelName %>}},
                  total: { type: 'object', properties: { count: { type: 'number' } } }
                }},
              },
            },
          },
        },
        "x-table-name": "<%=tableName%>"
      })
      async <%= val['name'] %>(
        @param.query.object('filter', getFilterSchemaFor(<%= modelName %>)) filter?: Filter,
      ): Promise<{data: <%= modelName %>[], total:Count}> {
          filter = filter || {};
        <%_ if (val['filter']) { -%>
          filter.where = filter.where || {};
          Object.assign(filter.where, <%- JSON.stringify(val['filter']) %>);
        <%_ } -%>
        <%_ if (val['fields']) { -%>
          filter.fields = filter.fields || {};
          Object.assign(filter.fields, <%- JSON.stringify(val['fields']) %>);
        <%_ } -%>
        return {
          data: await this.<%= repositoryNameCamel %>.find(filter),
          total: await this.<%= repositoryNameCamel %>.count(filter['where'] || {})
        };
      }

    <%_ } -%>
  <%_ }) -%>

}
